import "split.ja"



function execute code {
    var tokens ;= !split("\n" #code);
    var tokens ;= join("\t" #tokens);
    var tokens ;= !split("\t" #tokens);
    var tokens ;= join(" " #tokens);
    var tokens ;= !split(" " #tokens);
    var pos ;= 0;
    var toksize ;= sizeof(#tokens);
    var stack ;= array;
    function cont {
        while {
            if(#pos < #toksize) {
                var token ;= #tokens(#pos);
                var pos ;= #pos + 1;
                if(#token != ";") {
                    println #token " ";
                } if (#token = ";") {
                    println "\n";
                    break
                    !interpret()
                }
            } if(#pos >= #toksize) {
                break
            }
        }
    }
    function interpret {
        while {
            if(#pos < #toksize) {
                var token ;= #tokens(#pos);
                var pos ;= #pos + 1;
                if(#token = "print") {
                    !cont()
                }
            } if(#pos >= #toksize) {
                exec "break";
                @ this 'exec' is used to force the 'break' to work, or execute other code from a string ( to add an '"' to your strings, you can use "\'") @
            }
        }
    }
    !interpret()
}
@ If you try to stop a while loop inside another while loop, both will be stopped (and all the whiles that are active) @

!execute("print Hello world! ; print aaaa ;")
